"use strict";
var $__hoek__,
    $__require_45_dir__,
    $__path__,
    $__di__;
var Hoek = ($__hoek__ = require("hoek"), $__hoek__ && $__hoek__.__esModule && $__hoek__ || {default: $__hoek__}).default;
var requireDir = ($__require_45_dir__ = require("require-dir"), $__require_45_dir__ && $__require_45_dir__.__esModule && $__require_45_dir__ || {default: $__require_45_dir__}).default;
var npath = ($__path__ = require("path"), $__path__ && $__path__.__esModule && $__path__ || {default: $__path__}).default;
var Injector = ($__di__ = require("di"), $__di__ && $__di__.__esModule && $__di__ || {default: $__di__}).Injector;
var extractRoutes = function(serviceObject, injector, server) {
  if (serviceObject) {
    if (serviceObject.default) {
      var route = injector.get(serviceObject.default);
      server.register({register: route}, function(err) {});
    } else {
      Object.keys(serviceObject).forEach(function(key) {
        var posibleService = serviceObject[key];
        extractRoutes(posibleService, injector, server);
      });
    }
  }
};
exports.register = function(server, options, next) {
  var injector = new Injector();
  var options = Hoek.applyToDefaults({}, options);
  if (injector) {
    var $__7 = true;
    var $__8 = false;
    var $__9 = undefined;
    try {
      for (var $__5 = void 0,
          $__4 = (options.paths)[$traceurRuntime.toProperty(Symbol.iterator)](); !($__7 = ($__5 = $__4.next()).done); $__7 = true) {
        var path = $__5.value;
        {
          var absolutePath = npath.resolve(path);
          var services = requireDir(absolutePath, {recurse: true});
          extractRoutes(services, injector, server);
        }
      }
    } catch ($__10) {
      $__8 = true;
      $__9 = $__10;
    } finally {
      try {
        if (!$__7 && $__4.return != null) {
          $__4.return();
        }
      } finally {
        if ($__8) {
          throw $__9;
        }
      }
    }
  }
  next();
};
exports.register.attributes = {name: 'routes'};
//# sourceMappingURL=data:application/json;base64,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QUcsS0FBRyxDQUFDLENBQUMsQ0FBQztBQUN4RCxzQkFBWSxBQUFDLENBQUMsUUFBTyxDQUFHLFNBQU8sQ0FBRyxPQUFLLENBQUMsQ0FBQztRQUUxQztNQTVCSztBQUFBLElBRkEsQ0FBRSxhQUEwQjtBQUMxQixXQUFvQixLQUFHLENBQUM7QUFDeEIsaUJBQW9DLENBQUM7SUFDdkMsQ0FBRSxPQUFRO0FBQ1IsUUFBSTtBQUNGLFdBQUksS0FBaUIsR0FBSyxDQUFBLFdBQXVCLEdBQUssS0FBRyxDQUFHO0FBQzFELG9CQUF3QixBQUFDLEVBQUMsQ0FBQztRQUM3QjtBQUFBLE1BQ0YsQ0FBRSxPQUFRO0FBQ1IsZ0JBQXdCO0FBQ3RCLG9CQUF3QjtRQUMxQjtBQUFBLE1BQ0Y7QUFBQSxJQUNGO0FBQUEsRUFrQk47QUFBQSxBQUNBLEtBQUcsQUFBQyxFQUFDLENBQUM7QUFDUixDQUFDO0FBR0QsTUFBTSxTQUFTLFdBQVcsRUFBSSxFQUM3QixJQUFHLENBQUcsU0FBTyxDQUNkLENBQUM7QUFDRCIsImZpbGUiOiJsaWIvcm91dGVzLmpzIiwic291cmNlUm9vdCI6Ii9ob21lL290dG8vd29ya3NwYWNlL29wZW5zb3VyY2Uvbm9kZS1oYXBpLXNlZWQvc2VydmVyL3NyYy8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSG9layBmcm9tICdob2VrJztcbmltcG9ydCByZXF1aXJlRGlyIGZyb20gJ3JlcXVpcmUtZGlyJztcbmltcG9ydCBucGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7SW5qZWN0b3J9IGZyb20gJ2RpJztcblxudmFyIGV4dHJhY3RSb3V0ZXMgPSBmdW5jdGlvbihzZXJ2aWNlT2JqZWN0LCBpbmplY3Rvciwgc2VydmVyKSB7XG5cblx0aWYoc2VydmljZU9iamVjdCkge1xuXHRcdGlmKHNlcnZpY2VPYmplY3QuZGVmYXVsdCkge1xuXG5cdFx0XHRsZXQgcm91dGUgPSBpbmplY3Rvci5nZXQoc2VydmljZU9iamVjdC5kZWZhdWx0KTtcblx0XHRcdHNlcnZlci5yZWdpc3Rlcih7XG5cdFx0XHRcdHJlZ2lzdGVyOiByb3V0ZVxuXHRcdFx0fSwgZnVuY3Rpb24oZXJyKXtcblxuXHRcdFx0IH0pO1xuXHRcdH1cblx0XHRlbHNlIHtcblx0XHRcdE9iamVjdC5rZXlzKHNlcnZpY2VPYmplY3QpLmZvckVhY2goZnVuY3Rpb24oa2V5KXtcblx0XHRcdFx0bGV0IHBvc2libGVTZXJ2aWNlID0gc2VydmljZU9iamVjdFtrZXldO1xuXHRcdFx0XHRleHRyYWN0Um91dGVzKHBvc2libGVTZXJ2aWNlLCBpbmplY3Rvciwgc2VydmVyKTtcblx0XHRcdH0pO1xuXHRcdH1cblx0fVxufTtcblxuZXhwb3J0cy5yZWdpc3RlciA9IGZ1bmN0aW9uIChzZXJ2ZXIsIG9wdGlvbnMsIG5leHQpIHtcblx0ICB2YXIgaW5qZWN0b3IgPSBuZXcgSW5qZWN0b3IoKTtcblx0XHR2YXIgb3B0aW9ucyA9IEhvZWsuYXBwbHlUb0RlZmF1bHRzKHsgfSwgb3B0aW9ucyk7XG5cblx0XHRpZihpbmplY3Rvcil7XG5cdFx0XHRmb3IobGV0IHBhdGggb2Ygb3B0aW9ucy5wYXRocykge1xuXHRcdFx0XHRsZXQgYWJzb2x1dGVQYXRoID0gbnBhdGgucmVzb2x2ZShwYXRoKTtcblx0XHRcdFx0bGV0IHNlcnZpY2VzID0gcmVxdWlyZURpcihhYnNvbHV0ZVBhdGgsIHtyZWN1cnNlOiB0cnVlfSk7XHRcdFx0XHRcblx0XHRcdFx0ZXh0cmFjdFJvdXRlcyhzZXJ2aWNlcywgaW5qZWN0b3IsIHNlcnZlcik7XG5cblx0XHRcdH1cblx0XHR9XG5cdFx0bmV4dCgpO1xufTtcblxuXG5leHBvcnRzLnJlZ2lzdGVyLmF0dHJpYnV0ZXMgPSB7XG5cdG5hbWU6ICdyb3V0ZXMnXG59O1xuIl19
